<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="FoxDb" #>
<#@ import namespace="FoxTunes.Interfaces" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
if (this.Filter != null)
{
	switch (this.Source)
	{
		case LibraryHierarchyFilterSource.LibraryItem:
#>
AND EXISTS
	(
		SELECT *
		FROM "MetaDataItems"
			INNER JOIN "LibraryItem_MetaDataItem"
				ON "LibraryItem_MetaDataItem"."MetaDataItem_Id" = "MetaDataItems"."Id"
			WHERE "LibraryItem_MetaDataItem"."LibraryItem_Id" = "LibraryItems"."Id"
<#
			break;
		case LibraryHierarchyFilterSource.LibraryHierarchyItem:
#>
AND EXISTS
	(
		SELECT *
		FROM "LibraryHierarchyItem_LibraryItem"
			INNER JOIN "LibraryItem_MetaDataItem" 
				ON "LibraryHierarchyItem_LibraryItem"."LibraryItem_Id" = "LibraryItem_MetaDataItem"."LibraryItem_Id"
			INNER JOIN "MetaDataItems"
				ON "LibraryItem_MetaDataItem"."MetaDataItem_Id" = "MetaDataItems"."Id"
			WHERE "LibraryHierarchyItem_LibraryItem"."LibraryHierarchyItem_Id" = "LibraryHierarchyItems"."Id"
<#
			break;
	}
	foreach (var group in this.Filter.Groups)
	{
#>	 AND (<#
		var first = true;
		foreach (var entry in group.Entries)
		{
			if (first)
			{
				first = false;
			}
			else
			{
				switch (group.Operator)
				{
					default:
					case	FilterParserGroupOperator.And:
#> AND <#
					break;
					case FilterParserGroupOperator.Or:
#> OR <#
					break;
				}
			}
#>("MetaDataItems"."Name" = <#= this.Database.QueryFactory.Dialect.String(entry.Name) #> AND "MetaDataItems"."Value"<#
			switch (entry.Operator)
			{
				default:
				case FilterParserEntryOperator.Equal:
#> = <#
					break;
				case FilterParserEntryOperator.Greater:
#> > <#					
					break;
				case FilterParserEntryOperator.GreaterEqual:
#> >= <#					
					break;
				case FilterParserEntryOperator.Less:
#> < <#					
					break;
				case FilterParserEntryOperator.LessEqual:
#> <= <#					
					break;
				case FilterParserEntryOperator.Match:
#> LIKE <#					
					break;
			}
#><#= this.Database.QueryFactory.Dialect.String(
	entry.Value.Replace(
		FilterParserResultEntry.WILDCARD,
		"%"
	)
) #>)<#
		}
#>)<#		
	}
	switch (this.Source)
	{
		case LibraryHierarchyFilterSource.LibraryItem:
		case LibraryHierarchyFilterSource.LibraryHierarchyItem:
#>
	)
<#		
			break;
	}
}
#>