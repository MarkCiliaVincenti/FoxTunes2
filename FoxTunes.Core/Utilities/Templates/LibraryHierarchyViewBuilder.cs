// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FoxTunes.Utilities.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class LibraryHierarchyViewBuilder : LibraryHierarchyViewBuilderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nDROP TABLE IF EXISTS \"LibraryHierarchyLevelLeaf\";\r\nCREATE TEMPORARY TABLE \"Libr" +
                    "aryHierarchyLevelLeaf\"\r\nAS\r\n\tSELECT LibraryHierarchy_Id, MAX(\"LibraryHierarchyLe" +
                    "vel_Id\") AS \"LibraryHierarchyLevel_Id\"\r\n\tFROM \"LibraryHierarchy_LibraryHierarchy" +
                    "Level\"\r\n\tGROUP BY \"LibraryHierarchy_Id\";\r\nCREATE UNIQUE INDEX \"IDX_LibraryHierar" +
                    "chyLevelLeaf\" ON \"LibraryHierarchyLevelLeaf\"\r\n(\r\n\t\"LibraryHierarchy_Id\"\r\n);\r\n\r\nD" +
                    "ROP TABLE IF EXISTS \"LibraryHierarchyLevelParent\";\r\nCREATE TEMPORARY TABLE \"Libr" +
                    "aryHierarchyLevelParent\"\r\nAS\r\n\tSELECT \"LibraryHierarchy_LibraryHierarchyLevel\".\"" +
                    "Id\" AS \"Id\", MAX(\"LibraryHierarchy_LibraryHierarchyLevel_Copy\".\"Id\") AS \"Parent_" +
                    "Id\"\r\n\tFROM \"LibraryHierarchy_LibraryHierarchyLevel\"\r\n\tJOIN \"LibraryHierarchy_Lib" +
                    "raryHierarchyLevel\" AS \"LibraryHierarchy_LibraryHierarchyLevel_Copy\"\r\n\t\tON \"Libr" +
                    "aryHierarchy_LibraryHierarchyLevel\".\"LibraryHierarchy_Id\"  = \"LibraryHierarchy_L" +
                    "ibraryHierarchyLevel_Copy\".\"LibraryHierarchy_Id\"\r\n\t\t\tAND \"LibraryHierarchy_Libra" +
                    "ryHierarchyLevel_Copy\".\"Id\" < \"LibraryHierarchy_LibraryHierarchyLevel\".\"Id\"\r\n\tGR" +
                    "OUP BY \"LibraryHierarchy_LibraryHierarchyLevel\".\"Id\";\r\nCREATE UNIQUE INDEX \"IDX_" +
                    "LibraryHierarchyLevelParent\" ON \"LibraryHierarchyLevelParent\"\r\n(\r\n\t\"Id\"\r\n);\r\n\r\nD" +
                    "ROP TABLE IF EXISTS \"LibraryHierarchy\";\r\nCREATE TEMPORARY TABLE \"LibraryHierarch" +
                    "y\"\r\nAS\r\n\tWITH \"VerticalMetaData\"\r\n\tAS\r\n\t(\r\n\t\tSELECT \"LibraryItems\".\"Id\", \"Librar" +
                    "yItems\".\"FileName\", \"MetaDataItems\".\"Name\", \r\n\t\t\tCASE \r\n\t\t\t\tWHEN \"MetaDataItems\"" +
                    ".\"NumericValue\" IS NOT NULL THEN \'Numeric\' \r\n\t\t\t\tWHEN \"MetaDataItems\".\"TextValue" +
                    "\" IS NOT NULL THEN \'Text\' \r\n\t\t\t\tWHEN \"MetaDataItems\".\"FileValue\" IS NOT NULL THE" +
                    "N \'File\' \r\n\t\t\tEND AS \"ValueType\",\r\n\t\t\t\tCASE \r\n\t\t\t\tWHEN \"MetaDataItems\".\"NumericV" +
                    "alue\" IS NOT NULL THEN \"MetaDataItems\".\"NumericValue\"\r\n\t\t\t\tWHEN \"MetaDataItems\"." +
                    "\"TextValue\" IS NOT NULL THEN \"MetaDataItems\".\"TextValue\" \r\n\t\t\t\tWHEN \"MetaDataIte" +
                    "ms\".\"FileValue\" IS NOT NULL THEN \"MetaDataItems\".\"FileValue\"\r\n\t\t\tEND AS \"Value\"\r" +
                    "\n\t\tFROM \"LibraryItems\"\r\n\t\t\tJOIN \"LibraryItem_MetaDataItem\" ON \"LibraryItems\".\"Id" +
                    "\" = \"LibraryItem_MetaDataItem\".\"LibraryItem_Id\"\r\n\t\t\tJOIN \"MetaDataItems\" ON \"Met" +
                    "aDataItems\".\"Id\" = \"LibraryItem_MetaDataItem\".\"MetaDataItem_Id\"\r\n\t\tORDER BY \"Lib" +
                    "raryItems\".\"Id\"\r\n\t)\r\n\t,\r\n\t\"HorizontalMetaData\"\r\n\tAS\r\n\t(\r\n\t");
            
            #line 58 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new PivotViewBuilder(
			"VerticalMetaData", 
			new[] { "Id", "FileName" }, 
			new[] { "Name" }, 
			new[] { "ValueType", "Value" }, 
			this.MetaDataNames
		).TransformText()));
            
            #line default
            #line hidden
            this.Write(@"
	)

	SELECT ""LibraryHierarchy_LibraryHierarchyLevel"".""LibraryHierarchy_Id"" AS ""LibraryHierarchy_Id"", ""LibraryHierarchyLevels"".""Id"" AS ""LibraryHierarchyLevel_Id"", ""HorizontalMetaData"".""Id"" AS ""LibraryItem_Id"",
		EXECUTE_SCRIPT
		(
			""HorizontalMetaData"".""FileName"",
			""LibraryHierarchyLevels"".""DisplayScript""
	");
            
            #line 74 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"

		for(var index = 0; index < this.MetaDataNames.Length; index++)
		{
			
            
            #line default
            #line hidden
            this.Write(",\"Key_");
            
            #line 77 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write("\", \"Value_");
            
            #line 77 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write("_Value\"");
            
            #line 77 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"

		}
	
            
            #line default
            #line hidden
            this.Write("\t\t) AS DisplayValue,\r\n\t\tEXECUTE_SCRIPT\r\n\t\t(\r\n\t\t\t\"HorizontalMetaData\".\"FileName\",\r" +
                    "\n\t\t\t\"LibraryHierarchyLevels\".\"SortScript\"\r\n\t");
            
            #line 85 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"

		for(var index = 0; index < this.MetaDataNames.Length; index++)
		{
			
            
            #line default
            #line hidden
            this.Write(",\"Key_");
            
            #line 88 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write("\", \"Value_");
            
            #line 88 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write("_Value\"");
            
            #line 88 "C:\Source\FoxTunes\FoxTunes.Core\Utilities\Templates\LibraryHierarchyViewBuilder.tt"

		}
	
            
            #line default
            #line hidden
            this.Write("\t\t) AS SortValue,\r\n\t\t\"LibraryHierarchy_LibraryHierarchyLevel\".\"LibraryHierarchyLe" +
                    "vel_Id\" = \"LibraryHierarchyLevelLeaf\".\"LibraryHierarchyLevel_Id\" AS \"IsLeaf\"\r\n\tF" +
                    "ROM \"LibraryHierarchyLevels\"\r\n\t\tJOIN \"LibraryHierarchy_LibraryHierarchyLevel\" \r\n" +
                    "\t\t\tON \"LibraryHierarchyLevels\".\"Id\" = \"LibraryHierarchy_LibraryHierarchyLevel\".\"" +
                    "LibraryHierarchyLevel_Id\"\r\n\t\tJOIN \"LibraryHierarchyLevelLeaf\" \r\n\t\t\tON \"LibraryHi" +
                    "erarchyLevelLeaf\".\"LibraryHierarchy_Id\" = \"LibraryHierarchy_LibraryHierarchyLeve" +
                    "l\".\"LibraryHierarchy_Id\" \r\n\t\tJOIN \"HorizontalMetaData\";\r\nCREATE UNIQUE INDEX \"ID" +
                    "X_LibraryHierarchy\" ON \"LibraryHierarchy\"\r\n(\r\n\t\"LibraryHierarchy_Id\",\r\n\t\"Library" +
                    "HierarchyLevel_Id\",\r\n\t\"LibraryItem_Id\",\r\n\t\"DisplayValue\",\r\n\t\"SortValue\",\r\n\t\"IsLe" +
                    "af\"\r\n);\r\nCREATE INDEX \"IDX_LibraryHierarchy_LibraryItem\" ON \"LibraryHierarchy\"\r\n" +
                    "(\r\n\t\"LibraryItem_Id\"\r\n);\r\n\r\nDELETE FROM \"LibraryHierarchyItems\";\r\n\r\nINSERT INTO " +
                    "\"LibraryHierarchyItems\" (\"LibraryHierarchy_Id\", \"LibraryHierarchyLevel_Id\", \"Dis" +
                    "playValue\", \"SortValue\", \"IsLeaf\")\r\nSELECT \"LibraryHierarchy_Id\", \"LibraryHierar" +
                    "chyLevel_Id\", \"DisplayValue\", \"SortValue\", \"IsLeaf\"\r\nFROM \"LibraryHierarchy\"\r\nGR" +
                    "OUP BY \"LibraryHierarchy_Id\", \"LibraryHierarchyLevel_Id\", \"DisplayValue\", \"SortV" +
                    "alue\", \"IsLeaf\";\r\n\r\nUPDATE \"LibraryHierarchyItems\"\r\nSET \"Parent_Id\" = \r\n(\r\n\tSELE" +
                    "CT \"LibraryHierarchyItems_Copy\".\"Id\"\r\n\tFROM \"LibraryHierarchyItems\" AS \"LibraryH" +
                    "ierarchyItems_Copy\"\r\n\t\tJOIN \"LibraryHierarchy\" ON \"LibraryHierarchy\".\"LibraryHie" +
                    "rarchy_Id\" = \"LibraryHierarchyItems\".\"LibraryHierarchy_Id\"\r\n\t\tAND \"LibraryHierar" +
                    "chy\".\"LibraryHierarchyLevel_Id\" = \"LibraryHierarchyItems\".\"LibraryHierarchyLevel" +
                    "_Id\"\r\n\t\tAND \"LibraryHierarchy\".\"DisplayValue\" = \"LibraryHierarchyItems\".\"Display" +
                    "Value\"\r\n\t\tAND \"LibraryHierarchy\".\"SortValue\" = \"LibraryHierarchyItems\".\"SortValu" +
                    "e\"\r\n\t\tAND \"LibraryHierarchy\".\"IsLeaf\" = \"LibraryHierarchyItems\".\"IsLeaf\"\r\n\tJOIN " +
                    "\"LibraryHierarchyLevelParent\" \r\n\t\tON \"LibraryHierarchyLevelParent\".\"Id\" = \"Libra" +
                    "ryHierarchyItems\".\"LibraryHierarchyLevel_Id\"\r\n\tJOIN \"LibraryHierarchy\" AS \"Libra" +
                    "ryHierarchy_Copy\" ON \"LibraryHierarchy_Copy\".\"LibraryHierarchy_Id\" = \"LibraryHie" +
                    "rarchyItems_Copy\".\"LibraryHierarchy_Id\"\r\n\t\tAND \"LibraryHierarchy_Copy\".\"LibraryH" +
                    "ierarchyLevel_Id\" = \"LibraryHierarchyLevelParent\".\"Parent_Id\"\r\n\t\tAND \"LibraryHie" +
                    "rarchy_Copy\".\"LibraryItem_Id\" = \"LibraryHierarchy\".\"LibraryItem_Id\"\r\n\t\tAND \"Libr" +
                    "aryHierarchy_Copy\".\"DisplayValue\" = \"LibraryHierarchyItems_Copy\".\"DisplayValue\"\r" +
                    "\n\t\tAND \"LibraryHierarchy_Copy\".\"SortValue\" = \"LibraryHierarchyItems_Copy\".\"SortV" +
                    "alue\"\r\n\t\tAND \"LibraryHierarchy_Copy\".\"IsLeaf\" = \"LibraryHierarchyItems_Copy\".\"Is" +
                    "Leaf\"\r\n);\r\n\r\nDELETE FROM \"LibraryHierarchyItem_LibraryItem\";\r\n\r\nINSERT INTO \"Lib" +
                    "raryHierarchyItem_LibraryItem\" (\"LibraryHierarchyItem_Id\", \"LibraryItem_Id\")\r\nSE" +
                    "LECT \"LibraryHierarchyItems\".\"Id\", \"LibraryHierarchy\".\"LibraryItem_Id\"\r\nFROM \"Li" +
                    "braryHierarchyItems\"\r\n\tJOIN \"LibraryHierarchy\" ON \"LibraryHierarchy\".\"LibraryHie" +
                    "rarchy_Id\" \r\n\t\tAND \"LibraryHierarchy\".\"LibraryHierarchyLevel_Id\" = \"LibraryHiera" +
                    "rchyItems\".\"LibraryHierarchyLevel_Id\"\r\n\t\tAND \"LibraryHierarchy\".\"DisplayValue\" =" +
                    " \"LibraryHierarchyItems\".\"DisplayValue\"\r\n\t\tAND \"LibraryHierarchy\".\"SortValue\" = " +
                    "\"LibraryHierarchyItems\".\"SortValue\"\r\n\t\tAND \"LibraryHierarchy\".\"IsLeaf\" = \"Librar" +
                    "yHierarchyItems\".\"IsLeaf\";\r\n\r\nDROP TABLE \"LibraryHierarchyLevelLeaf\";\r\nDROP TABL" +
                    "E \"LibraryHierarchyLevelParent\";\r\nDROP TABLE \"LibraryHierarchy\";");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class LibraryHierarchyViewBuilderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
